akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

akka.persistence.journal.leveldb.dir = "log/journal"
akka.persistence.snapshot-store.local.dir = "log/snapshots"

# DO NOT USE THIS IN PRODUCTION !!!
# See also https://github.com/typesafehub/activator/issues/287
akka.persistence.journal.leveldb.native = false

# Configuration for the LeveldbReadJournal
akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournalProvider
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

  # Absolute path to the write journal plugin configuration entry that this
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""

  # The LevelDB write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100
}
//akka {
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//  loglevel = "DEBUG"
//  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
//}

//akka {
//  persistence {
//    journal.plugin = "akka-persistence-sql-async.journal"
//    snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
//  }
//}
//
//akka-persistence-sql-async {
//  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
//  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"
//
//  # For PostgreSQL
//  # journal.class = "akka.persistence.journal.sqlasync.PostgreSQLAsyncWriteJournal"
//  # snapshot-store.class = "akka.persistence.snapshot.sqlasync.PostgreSQLSnapshotStore"
//
//  user = "root"
//  password = ""
//  url = "jdbc:mysql://localhost:3306/akka_persistence_sql_async"
//  max-pool-size = 4
//  wait-queue-capacity = 10000
//
//  metadata-table-name = "persistence_metadata"
//  journal-table-name = "persistence_journal"
//  snapshot-table-name = "persistence_snapshot"
//}

akka.actor.serializers {
  kryo = "com.twitter.chill.akka.AkkaSerializer"
}
akka.actor.serialization-bindings {
  "scala.Product" = kryo
  "akka.persistence.PersistentRepr" = kryo
}

akka {

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
}